{
  
    
        "post0": {
            "title": "Network analysis of Tower Theatre and Los Angeles Theatre",
            "content": "Network analysis of Tower Theatre and Los Angeles Theatre . Introduction . My project focuses on newspaper articles in The Los Angeles News published between 1927–1931 surrounding Tower Theatre and Los Angeles Theatre in downtown LA. Both theaters, located in Historic Core, were originally owned by entrepreneur H. L. Gumbiner (1879-1952) and designed by architect S. Charles Lee (1899-1990) in 1927 and 1931, respectively. These two theaters demonstrated a multiplicity of innovations and represented a peak of Los Angeles movie palaces in the 1920s and the beginning of the 1930s. . With the decline of downtown LA and the increased competition of chain movie theaters, both Tower Theatre and Los Angeles Theatre were unable to survive through the end of the twentieth century. Tower Theatre changed its name to Newsreel Theatre and permanently closed in 1988. In 2021, Apple renovated the building and rebranded it as Apple Tower Theatre, reviving the landmark architecture and transforming the old movie palace into an Apple store. Los Angeles Theatre, once considered the best movie theatre in the world, stopped selling movie tickets in 1994. Currently, it serves as a film shoot location. . In this project, I would like to explore a network of the architect, theater owners, investors, and other technicians to understand how the network influenced the completion of these two buildings. . Tower Theatre: 802 S Broadway, Los Angeles, CA 90014 | Los Angeles Theatre: 615 S Broadway, Los Angeles, CA 90014 | . Today&#39;s Tower Theatre The auditorium of Los Angeles Theatre Justification . My project is in progress. It already contained blueprint annotations and a portion of demonstration of 3D modeling. But there is a shortage of qualitative analyses, such as text analysis and network analysis to make this project more comprehensive. If I can integrate network analysis into this project, it will help readers understand how the completion of these two buildings associated fields of cinema, business, architecture, and science. . The stake of this project is a limitation of archival research. Due to the limited time, I can only collect data from The Los Angeles News. However, there are still a lot of newspaper articles surrounding these two buildings that I am not able to explore this quarter. . Data source . My data sources were newspaper articles published in The Los Angeles News between 1927 to 1931. I export important articles that I collect from Zotero as CSV files that I aim to visualize. I also manually calculate the frequency of figures appearing in the articles and create a dataset for python. Additionally, based on these articles, I listed the source and the target as a dataset for python libiraires to further calculate communities surrounding Tower and Los Angeles Theatres. . 1. The Zotero data of Tower Theater with names . Title Date Pages Short Title Name Name Name Name Name Name Name . NEW THEATER PROJECTED: Southeast Corner of Eighth and Broadway Will Be Improved With Showhouse | 1926-09-12 | E3 | NEW THEATER PROJECTED | S. Charles Lee | S. Charles Lee | H. L. Gumbiner | S. Charles Lee | S. Charles Lee | H. L. Gumbiner | S. Charles Lee | . &quot;THEATER LANDMARK RAZED: Crews Begin Wrecking, of Old Garrick Showhouse at Eighth and Broadway; New One to Rise&quot; | 1927-03-06 | E1 | THEATER LANDMARK RAZED | S. Charles Lee | S. Charles Lee | S. Charles Lee | S. Charles Lee | R. E. Campbell | | | . &quot;TOWER, NEW PLAYHOUSE, WILL OPEN: First-Run Photoplays to be Presented; Premiere on October 12&quot; | 1927-09-22 | A9 | &quot;TOWER, NEW PLAYHOUSE, WILL OPEN&quot; | H. L. Gumbiner | | | | | | | . FRENCH STYLE USED IN THEATER: Towered Unit Rising on Broadway | 1927-09-25 | E2 | FRENCH STYLE USED IN THEATER | H. L. Gumbiner | S. Charles Lee | | | | | | . Refrigeration is Installed | 1927-09-27 | A10 | | H. L. Gumblner | | | | | | | . Weekly Change Meets Favor | 1927-09-28 | A9 | | | | | | | | | . First-Run Regime Begins Today | 1927-09-30 | A9 | | Edwardes Sprout | | | | | | | . TOWER PLAY HOUSE WILL OPEN SOON: Architecture of Unique Design is Main Feature; Many Innovations | 1927-10-02 | 32 | TOWER PLAY HOUSE WILL OPEN SOON | Edwardes Sprout | H. L. Gumblner | | | | | | . Meeting Held at Criterion | 1927-10-04 | A11 | | Sam Warner | | | | | | | . 2. The Zotero data of Los Angeles Theater with names . Author Title Date Pages Short Title Name Name Name Name Name Name Name . | Innovations Mark Newest Theater: New Los Angeles Playhouse Luxurious Beyond Compare | 1930-12-04 | 23 | | H. L. Gumbiner | Charlie Chaplin | S. Charles Lee | | | | | | | | | | | | | | | | . | Chaplin&#39;s New Film Due | 1931-01-04 | B14 | | Charlie Chaplin | Charlie Chaplin | Frederick Lonsdale | Charlie Chaplin | Charlie Chaplin | Joseph Grimaldi | Joseph Grimaldi | Frederick Lonsdale | Charlie Chaplin | H. L. Gumbiner | | | | | | | | | . &quot;Scheuer, Philip K.&quot; | &quot;THEATER IDEAL SOON TO OPEN: City&#39;s New Showhouse Built on, Unique Specification Many Innovations Apparent With Completion Near Screen Miniatures Show Film in Lounges of House&quot; | 1931-01-18 | NaN–NaN | THEATER IDEAL SOON TO OPEN | Philip K. Scheuer | H. L. Gumbiner | S. Charles Lee | H. L. Gumbiner | Louis XIV | | | | | | | | | | | | | | . | Business Men Pay Tribute to New Showhouse | 1931-01-29 | A8 | | H. L. Gumbiner | N. P. Alexander | H. L. Gumbiner | Charlie Chaplin | | | | | | | | | | | | | | | . | &quot;&#39;CITY LIGHTS&#39; NO ORDINARY FILM: First Silent Picture Since &quot;&quot;Talkies&quot;&quot; Came in Play | Music | Direction | All Charlie Chaplin&#39;s Cinema World Buys First Tickets by Blocks&quot; | 1931-01-29 | A8 | &#39;CITY LIGHTS&#39; NO ORDINARY FILM | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Virginia Cherrill | Harry Myers | Hank Mann | Allan Garcia | Florence Lee | | | | | | | | . | &quot;LOS ANGELES THEATER OPENS TOMORROW NIGHT: Chaplin&#39;s &quot;&quot;City Lights&quot;&quot; Will Be Given Premiere in New Film Palace of Unrivalled Beauty&quot; | 1931-01-29 | A8 | LOS ANGELES THEATER OPENS TOMORROW NIGHT | Charlie Chaplin | Charlie Chaplin | Francis Peace | Dr. Michelson | S. Charles Lee | S. Charles Lee | S. Charles Lee | H. L. Gumbiner | | | | | | | | | | | . &quot;Schallert, Edwin&quot; | Premiere Jams Broadway | 1931-02-02 | A7 | | Edwin Schallert | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Charlie Chaplin | Harry Myers | Charlie Chaplin | Hank Mann | Charlie Chaplin | | | | . | Preview Pandemonium | 1931-02-02 | A4 | | Charlie Chaplin | | | | | | | | | | | | | | | | | | . | &quot;FIRST WEEK OF COLMAN FILM ENDS: &quot;&quot;The Devil to Pay&quot;&quot; at United Artists Proves Popular Vehicle&quot; | 1931-02-12 | 7 | FIRST WEEK OF COLMAN FILM ENDS | Charlie Chaplin | | | | | | | | | | | | | | | | | | . | &quot;WHAT&#39;S NEW IN SCIENCE: Conducted by Ransome Sutton University of California Is Developing New Acoustic Methods in Underground Room Series of Experiments. Dr. Pease Devises Sideshow for Theater Smokers, Deflecting Light from Main Screen to Smaller One in Smoking Room. Saving Ears and Nerves&quot; | 1931-03-15 | NaN–NaN | WHAT&#39;S NEW IN SCIENCE | Ransome Sutton | Dr. F. G. Pease | Dr. F. G. Pease | Dr. F. G. Pease | Prof. Einstein | Dr. F. G. Pease | Prof. Einstein | Charlie Chaplin | | | | | | | | | | | . 3. The source and the target in both Tower Theatre and Los Angeles Theatre . Source Target . &quot;‘Charlie Chaplin’, &quot; | &quot; ‘Edwin Schallert’,&quot; | . &quot;‘Hank Mann’,&quot; | &quot; ‘Edwin Schallert’,&quot; | . &quot;‘Harry Myers’,&quot; | &quot; ‘Edwin Schallert’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Allan Garcia’,&quot; | . &quot;‘Dr. F. G. Pease’,&quot; | &quot;‘Charlie Chaplin’, &quot; | . &quot;‘Dr. F. G. Pease’,&quot; | &quot;‘Charlie Chaplin’, &quot; | . &quot;‘H. L. Gumbiner’,&quot; | &quot;‘Charlie Chaplin’, &quot; | . &quot;‘Ransome Sutton’,&quot; | &quot;‘Charlie Chaplin’, &quot; | . &quot;‘Ransome Sutton’,&quot; | &quot;‘Dr. F. G. Pease’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Dr. Michelson’, &quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Florence Lee’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;Francis Peace’, &quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Frederick Lonsdale’,&quot; | . &quot;‘Joseph Grimaldi’,&quot; | &quot;‘Frederick Lonsdale’,&quot; | . &quot;’S. Charles Lee’,&quot; | &quot;‘H. L. Gumbiner’,&quot; | . &quot;‘Edwardes Sprout’,&quot; | &quot;‘H. L. Gumbiner’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Hank Mann’,&quot; | . &quot;‘Virginia Cherrill’,&quot; | &quot;‘Hank Mann’,&quot; | . &quot;‘Allan Garcia’,&quot; | &quot;‘Hank Mann’,&quot; | . &quot;‘Allan Garcia’,&quot; | &quot;‘Harry Myers’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Harry Myers’,&quot; | . &quot;‘Hank Mann’,&quot; | &quot;‘Harry Myers’,&quot; | . &quot;‘Virginia Cherrill’,&quot; | &quot;‘Harry Myers’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Joseph Grimaldi’,&quot; | . &quot;‘H. L. Gumbiner’,&quot; | &quot;‘Louis XIV’,&quot; | . &quot;’S. Charles Lee’,&quot; | &quot;‘Louis XIV’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;&#39;N. P. Alexander’,&quot; | . &quot;‘H. L. Gumbiner’,&quot; | &quot;&#39;N. P. Alexander’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Prof. Einstein’,&quot; | . &quot;‘Dr. F. G. Pease’,&quot; | &quot;‘Prof. Einstein’,&quot; | . &quot;‘Ransome Sutton’,&quot; | &quot;‘Prof. Einstein’,&quot; | . &quot;’S. Charles Lee’,&quot; | &quot;‘R. E. Campbell’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;’S. Charles Lee’,&quot; | . &quot;‘Allan Garcia’,&quot; | &quot;‘Virginia Cherrill’,&quot; | . &quot;‘Charlie Chaplin’, &quot; | &quot;‘Virginia Cherrill’,&quot; | . Expexted results and limitations . In this coding project, I first calculated how many people involved in thses two theatres in 1927 and 1931, respectively. I used for loop to iterate names that I collected from archives, resulting in a list that consists names without repetition. This list shows how many people were related to the establishment of these two theatres. However, not everyone played an significant role during this process. In order to better understand everyone&#39;s significance within this network, I imported the python libraries, nltk, pandas, and numpy, to calculate the frequency of these names and plot the freqeucy to showcase who are more influential among them. . I create interactive images displaying the network, such as centrality and degress, between people who involved in these two buildings. . . Tower_List = [&#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;R. E. Campbell&#39;, &#39;H. L. Gumbiner&#39;,&#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;, &#39;H. L. Gumbiner&#39;, &#39;Edwardes Sprout&#39;, &#39;Edwardes Sprout&#39;, &#39;H. L. Gumbiner&#39;, &#39;Sam Warner&#39;] . LA_List = [&#39;H. L. Gumbiner&#39;, &#39;Charlie Chaplin&#39;, &#39;S. Charles Lee&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Frederick Lonsdale&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Joseph Grimaldi&#39;, &#39;Joseph Grimaldi&#39;, &#39;Frederick Lonsdale&#39;, &#39;Charlie Chaplin&#39;, &#39;H. L. Gumbiner&#39;, &#39;Philip K. Scheuer&#39;, &#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;, &#39;H. L. Gumbiner&#39;, &#39;Louis XIV&#39;,&#39;H. L. Gumbiner&#39;, &#39;N. P. Alexander&#39;, &#39;H. L. Gumbiner&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Virginia Cherrill&#39;, &#39;Harry Myers&#39;, &#39;Hank Mann&#39;, &#39;Allan Garcia&#39;, &#39;Florence Lee&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Francis Peace&#39;, &#39;Dr. Michelson&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;S. Charles Lee&#39;, &#39;H. L. Gumbiner&#39;,&#39;Edwin Schallert&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Harry Myers&#39;, &#39;Charlie Chaplin&#39;, &#39;Hank Mann&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Ransome Sutton&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Prof. Einstein&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Prof. Einstein&#39;, &#39;Charlie Chaplin&#39;] . Tower_List_notrepeat = [] for people in Tower_List: if people not in Tower_List_notrepeat: Tower_List_notrepeat.append(people) . Tower_List_notrepeat.sort(reverse=False) print(Tower_List_notrepeat) . [&#39;Edwardes Sprout&#39;, &#39;H. L. Gumbiner&#39;, &#39;R. E. Campbell&#39;, &#39;S. Charles Lee&#39;, &#39;Sam Warner&#39;] . len(Tower_List_notrepeat) . 5 . LA_List_notrepeat = [] for people in LA_List: if people not in LA_List_notrepeat: LA_List_notrepeat.append(people) . LA_List_notrepeat.sort(reverse=False) print(LA_List_notrepeat) . [&#39;Allan Garcia&#39;, &#39;Charlie Chaplin&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. Michelson&#39;, &#39;Edwin Schallert&#39;, &#39;Florence Lee&#39;, &#39;Francis Peace&#39;, &#39;Frederick Lonsdale&#39;, &#39;H. L. Gumbiner&#39;, &#39;Hank Mann&#39;, &#39;Harry Myers&#39;, &#39;Joseph Grimaldi&#39;, &#39;Louis XIV&#39;, &#39;N. P. Alexander&#39;, &#39;Philip K. Scheuer&#39;, &#39;Prof. Einstein&#39;, &#39;Ransome Sutton&#39;, &#39;S. Charles Lee&#39;, &#39;Virginia Cherrill&#39;] . len(LA_List_notrepeat) . 19 . TowerAndLA_List_notrepeat = [] for people in Tower_List_notrepeat+LA_List_notrepeat: if people not in TowerAndLA_List_notrepeat: TowerAndLA_List_notrepeat.append(people) . TowerAndLA_List_notrepeat.sort(reverse=False) print(TowerAndLA_List_notrepeat) . [&#39;Allan Garcia&#39;, &#39;Charlie Chaplin&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. Michelson&#39;, &#39;Edwardes Sprout&#39;, &#39;Edwin Schallert&#39;, &#39;Florence Lee&#39;, &#39;Francis Peace&#39;, &#39;Frederick Lonsdale&#39;, &#39;H. L. Gumbiner&#39;, &#39;Hank Mann&#39;, &#39;Harry Myers&#39;, &#39;Joseph Grimaldi&#39;, &#39;Louis XIV&#39;, &#39;N. P. Alexander&#39;, &#39;Philip K. Scheuer&#39;, &#39;Prof. Einstein&#39;, &#39;R. E. Campbell&#39;, &#39;Ransome Sutton&#39;, &#39;S. Charles Lee&#39;, &#39;Sam Warner&#39;, &#39;Virginia Cherrill&#39;] . len(TowerAndLA_List_notrepeat) . 22 . In total, there were 23 people involving Tower Theatre and Los Angeles Theater. . TowerAndLA_List_REPEAT = [] for people in Tower_List_notrepeat and LA_List_notrepeat: if people in Tower_List_notrepeat and LA_List_notrepeat: TowerAndLA_List_REPEAT.append(people) . TowerAndLA_List_REPEAT.sort(reverse=False) print(TowerAndLA_List_REPEAT) . [&#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;] . Only H. L. Gumbiner and S.Charles Lee involved in both Tower Theatre and Los Angeles Theater. Gumbiner was the owner of these two theaters; Lee was their architect. . from nltk.probability import FreqDist import pandas as pd import numpy as np . df_Tower = pd.DataFrame(Tower_List) . df_Tower.columns = [&#39;Name&#39;] . df_Tower . Name . 0 S. Charles Lee | . 1 S. Charles Lee | . 2 H. L. Gumbiner | . 3 S. Charles Lee | . 4 S. Charles Lee | . 5 H. L. Gumbiner | . 6 S. Charles Lee | . 7 S. Charles Lee | . 8 S. Charles Lee | . 9 S. Charles Lee | . 10 S. Charles Lee | . 11 R. E. Campbell | . 12 H. L. Gumbiner | . 13 H. L. Gumbiner | . 14 S. Charles Lee | . 15 H. L. Gumbiner | . 16 Edwardes Sprout | . 17 Edwardes Sprout | . 18 H. L. Gumbiner | . 19 Sam Warner | . df_Tower.groupby(&#39;Name&#39;).size().plot.barh() . &lt;AxesSubplot:ylabel=&#39;Name&#39;&gt; . df_LA = pd.DataFrame(LA_List) . df_LA.columns = [&#39;Name&#39;] . df_LA . Name . 0 H. L. Gumbiner | . 1 Charlie Chaplin | . 2 S. Charles Lee | . 3 Charlie Chaplin | . 4 Charlie Chaplin | . ... ... | . 58 Dr. F. G. Pease | . 59 Prof. Einstein | . 60 Dr. F. G. Pease | . 61 Prof. Einstein | . 62 Charlie Chaplin | . 63 rows × 1 columns . df_LA.groupby(&#39;Name&#39;).size().plot.barh() . &lt;AxesSubplot:ylabel=&#39;Name&#39;&gt; . freq_TowerAndLA= FreqDist(Tower_List+LA_List) . freq_TowerAndLA . FreqDist({&#39;Charlie Chaplin&#39;: 27, &#39;S. Charles Lee&#39;: 15, &#39;H. L. Gumbiner&#39;: 13, &#39;Dr. F. G. Pease&#39;: 4, &#39;Edwardes Sprout&#39;: 2, &#39;Frederick Lonsdale&#39;: 2, &#39;Joseph Grimaldi&#39;: 2, &#39;Harry Myers&#39;: 2, &#39;Hank Mann&#39;: 2, &#39;Prof. Einstein&#39;: 2, ...}) . for people in sorted(freq_TowerAndLA, key=freq_TowerAndLA.get, reverse=True)[:]: print(people,freq_TowerAndLA[people]) . Charlie Chaplin 27 S. Charles Lee 15 H. L. Gumbiner 13 Dr. F. G. Pease 4 Edwardes Sprout 2 Frederick Lonsdale 2 Joseph Grimaldi 2 Harry Myers 2 Hank Mann 2 Prof. Einstein 2 R. E. Campbell 1 Sam Warner 1 Philip K. Scheuer 1 Louis XIV 1 N. P. Alexander 1 Virginia Cherrill 1 Allan Garcia 1 Florence Lee 1 Francis Peace 1 Dr. Michelson 1 Edwin Schallert 1 Ransome Sutton 1 . df_TowerAndLA = pd.DataFrame(Tower_List+LA_List) . df_TowerAndLA.columns = [&#39;Name&#39;] df_TowerAndLA . Name . 0 S. Charles Lee | . 1 S. Charles Lee | . 2 H. L. Gumbiner | . 3 S. Charles Lee | . 4 S. Charles Lee | . ... ... | . 78 Dr. F. G. Pease | . 79 Prof. Einstein | . 80 Dr. F. G. Pease | . 81 Prof. Einstein | . 82 Charlie Chaplin | . 83 rows × 1 columns . df_TowerAndLA.groupby(&#39;Name&#39;).size().plot.barh() . &lt;AxesSubplot:ylabel=&#39;Name&#39;&gt; . Network Analysis . import networkx as nx import matplotlib.pyplot as plt from bokeh.io import output_notebook, show, save from bokeh.models import Range1d, Circle, ColumnDataSource, MultiLine, EdgesAndLinkedNodes, NodesAndLinkedEdges, LabelSet from bokeh.plotting import figure from bokeh.plotting import from_networkx from bokeh.palettes import Blues8, Reds8, Purples8, Oranges8, Viridis8, Spectral8 from bokeh.transform import linear_cmap from networkx.algorithms import community output_notebook() . Loading BokehJS ... source = [ &#39;Charlie Chaplin&#39;, &#39;Hank Mann&#39;, &#39;Harry Myers&#39;, &#39;Charlie Chaplin&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. F. G. Pease&#39;, &#39;H. L. Gumbiner&#39;, &#39;Ransome Sutton&#39;, &#39;Ransome Sutton&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Joseph Grimaldi&#39;, &#39;S. Charles Lee&#39;, &#39;Edwardes Sprout&#39;, &#39;Charlie Chaplin&#39;, &#39;Virginia Cherrill&#39;, &#39;Allan Garcia&#39;, &#39;Allan Garcia&#39;, &#39;Charlie Chaplin&#39;, &#39;Hank Mann&#39;, &#39;Virginia Cherrill&#39;, &#39;Charlie Chaplin&#39;, &#39;H. L. Gumbiner&#39;, &#39;S. Charles Lee&#39;, &#39;Charlie Chaplin&#39;, &#39;H. L. Gumbiner&#39;, &#39;Charlie Chaplin&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Ransome Sutton&#39;, &#39;S. Charles Lee&#39;, &#39;Charlie Chaplin&#39;, &#39;Allan Garcia&#39;, &#39;Charlie Chaplin&#39;] target = [ &#39;Edwin Schallert&#39;, &#39;Edwin Schallert&#39;, &#39;Edwin Schallert&#39;, &#39;Allan Garcia&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Charlie Chaplin&#39;, &#39;Dr. F. G. Pease&#39;, &#39;Dr. Michelson&#39;, &#39;Florence Lee&#39;, &#39;Francis Peace&#39;, &#39;Frederick Lonsdale&#39;, &#39;Frederick Lonsdale&#39;, &#39;H. L. Gumbiner&#39;, &#39;H. L. Gumbiner&#39;, &#39;Hank Mann&#39;, &#39;Hank Mann&#39;, &#39;Hank Mann&#39;, &#39;Harry Myers&#39;, &#39;Harry Myers&#39;, &#39;Harry Myers&#39;, &#39;Harry Myers&#39;, &#39;Joseph Grimaldi&#39;, &#39;Louis XIV&#39;, &#39;Louis XIV&#39;, &#39;N. P. Alexander&#39;, &#39;N. P. Alexander&#39;, &#39;Prof. Einstein&#39;, &#39;Prof. Einstein&#39;, &#39;Prof. Einstein&#39;, &#39;R. E. Campbell&#39;, &#39;S. Charles Lee&#39;, &#39;Virginia Cherrill&#39;, &#39;Virginia Cherrill&#39;] . df = pd.DataFrame({&#39;source&#39;:source, &#39;target&#39;:target}) . df . source target . 0 Charlie Chaplin | Edwin Schallert | . 1 Hank Mann | Edwin Schallert | . 2 Harry Myers | Edwin Schallert | . 3 Charlie Chaplin | Allan Garcia | . 4 Dr. F. G. Pease | Charlie Chaplin | . 5 Dr. F. G. Pease | Charlie Chaplin | . 6 H. L. Gumbiner | Charlie Chaplin | . 7 Ransome Sutton | Charlie Chaplin | . 8 Ransome Sutton | Dr. F. G. Pease | . 9 Charlie Chaplin | Dr. Michelson | . 10 Charlie Chaplin | Florence Lee | . 11 Charlie Chaplin | Francis Peace | . 12 Charlie Chaplin | Frederick Lonsdale | . 13 Joseph Grimaldi | Frederick Lonsdale | . 14 S. Charles Lee | H. L. Gumbiner | . 15 Edwardes Sprout | H. L. Gumbiner | . 16 Charlie Chaplin | Hank Mann | . 17 Virginia Cherrill | Hank Mann | . 18 Allan Garcia | Hank Mann | . 19 Allan Garcia | Harry Myers | . 20 Charlie Chaplin | Harry Myers | . 21 Hank Mann | Harry Myers | . 22 Virginia Cherrill | Harry Myers | . 23 Charlie Chaplin | Joseph Grimaldi | . 24 H. L. Gumbiner | Louis XIV | . 25 S. Charles Lee | Louis XIV | . 26 Charlie Chaplin | N. P. Alexander | . 27 H. L. Gumbiner | N. P. Alexander | . 28 Charlie Chaplin | Prof. Einstein | . 29 Dr. F. G. Pease | Prof. Einstein | . 30 Ransome Sutton | Prof. Einstein | . 31 S. Charles Lee | R. E. Campbell | . 32 Charlie Chaplin | S. Charles Lee | . 33 Allan Garcia | Virginia Cherrill | . 34 Charlie Chaplin | Virginia Cherrill | . Network = nx.from_pandas_edgelist(df, &#39;source&#39;, &#39;target&#39;) . plot = figure(x_range=Range1d(-11, 11), y_range=Range1d(-11, 11)) network_graph = from_networkx(Network, nx.spring_layout, scale=10, center=(0, 0)) network_graph.node_renderer.glyph = Circle(size=30, fill_color=&#39;green&#39;) network_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width=1) plot.renderers.append(network_graph) x, y = zip(*network_graph.layout_provider.graph_layout.values()) node_labels = list(Network.nodes()) source = ColumnDataSource({&#39;x&#39;: x, &#39;y&#39;: y, &#39;name&#39;: [str(node_labels[i]) for i in range(len(x))]}) labels = LabelSet(x=&#39;x&#39;, y=&#39;y&#39;, text=&#39;name&#39;, source=source, background_fill_color=&#39;white&#39;, text_font_size=&#39;10px&#39;, background_fill_alpha=.7, x_offset=-5.0, y_offset=-5.0) plot.renderers.append(labels) show(plot) . degrees = dict(nx.degree(Network)) nx.set_node_attributes(Network, name=&#39;degree&#39;, values=degrees) # Slightly adjust degree so that the nodes with very small degrees are still visible number_to_adjust_by = 7 adjusted_node_size = dict([(node, degree+number_to_adjust_by) for node, degree in nx.degree(Network)]) nx.set_node_attributes(Network, name=&#39;adjusted_node_size&#39;, values=adjusted_node_size) # Calculate communities communities = community.greedy_modularity_communities(Network) # Add modularity class and color as attributes to network graph # Create empty dictionaries modularity_class = {} modularity_color = {} #Loop through each community in the network for community_number, community in enumerate(communities): #For each member of the community, add their community number and a distinct color for name in community: modularity_class[name] = community_number modularity_color[name] = Spectral8[community_number] # Add modularity class and color as attributes from the network above nx.set_node_attributes(Network, modularity_class, &#39;modularity_class&#39;) nx.set_node_attributes(Network, modularity_color, &#39;modularity_color&#39;) . node_highlight_color = &#39;white&#39; edge_highlight_color = &#39;black&#39; #Choose attributes from G network to size and color by — setting manual size (e.g. 10) or color (e.g. &#39;skyblue&#39;) also allowed size_by_this_attribute = &#39;adjusted_node_size&#39; color_by_this_attribute = &#39;modularity_color&#39; #Pick a color palette — Blues8, Reds8, Purples8, Oranges8, Viridis8 color_palette = Purples8 #Choose a title! title = &#39;The Network of Tower Theatre and Los Angeles Theatre&#39; #Establish which categories will appear when hovering over each node HOVER_TOOLTIPS = [ (&quot;Name&quot;, &quot;@index&quot;), (&quot;Degree&quot;, &quot;@degree&quot;), (&quot;Modularity Class&quot;, &quot;@modularity_class&quot;), (&quot;Modularity Color&quot;, &quot;$color[swatch]:modularity_color&quot;), ] #Create a plot — set dimensions, toolbar, and title plot = figure(tooltips = HOVER_TOOLTIPS, tools=&quot;pan,wheel_zoom,save,reset&quot;, active_scroll=&#39;wheel_zoom&#39;, x_range=Range1d(-10.1, 10.1), y_range=Range1d(-10.1, 10.1), title=title) #Create a network graph object # https://networkx.github.io/documentation/networkx-1.9/reference/generated/networkx.drawing.layout.spring_layout.html network_graph = from_networkx(Network, nx.spring_layout, scale=10, center=(0, 0)) #Set node sizes and colors according to node degree (color as category from attribute) network_graph.node_renderer.glyph = Circle(size=size_by_this_attribute, fill_color=color_by_this_attribute) #Set node highlight colors network_graph.node_renderer.hover_glyph = Circle(size=size_by_this_attribute, fill_color=node_highlight_color, line_width=2) network_graph.node_renderer.selection_glyph = Circle(size=size_by_this_attribute, fill_color=node_highlight_color, line_width=2) #Set edge opacity and width network_graph.edge_renderer.glyph = MultiLine(line_alpha=0.3, line_width=1) #Set edge highlight colors network_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color, line_width=2) network_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color, line_width=2) #Highlight nodes and edges network_graph.selection_policy = NodesAndLinkedEdges() network_graph.inspection_policy = NodesAndLinkedEdges() plot.renderers.append(network_graph) #Add Labels x, y = zip(*network_graph.layout_provider.graph_layout.values()) node_labels = list(Network.nodes()) source = ColumnDataSource({&#39;x&#39;: x, &#39;y&#39;: y, &#39;name&#39;: [node_labels[i] for i in range(len(x))]}) labels = LabelSet(x=&#39;x&#39;, y=&#39;y&#39;, text=&#39;name&#39;, source=source, background_fill_color=&#39;white&#39;, text_font_size=&#39;10px&#39;, background_fill_alpha=.7) plot.renderers.append(labels) show(plot) save(plot, filename=f&quot;{title}.html&quot;) . /opt/conda/lib/python3.9/site-packages/bokeh/io/saving.py:142: UserWarning: save() called but no resources were supplied and output_file(...) was never called, defaulting to resources.CDN warn(&#34;save() called but no resources were supplied and output_file(...) was never called, defaulting to resources.CDN&#34;) /opt/conda/lib/python3.9/site-packages/bokeh/io/saving.py:154: UserWarning: save() called but no title was supplied and output_file(...) was never called, using default title &#39;Bokeh Plot&#39; warn(&#34;save() called but no title was supplied and output_file(...) was never called, using default title &#39;Bokeh Plot&#39;&#34;) . &#39;/home/jovyan/Dh-140-Final-fastai/The Network of Tower Theatre and Los Angeles Theatre.html&#39; .",
            "url": "https://yandaudrey.github.io/Dh-140-Final-fastai/fastpages/jupyter/2022/03/10/Final-project.html",
            "relUrl": "/fastpages/jupyter/2022/03/10/Final-project.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yandaudrey.github.io/Dh-140-Final-fastai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yandaudrey.github.io/Dh-140-Final-fastai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yandaudrey.github.io/Dh-140-Final-fastai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yandaudrey.github.io/Dh-140-Final-fastai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}